1) JPA(Java Persistence API)
- Java ORM 기술에 대한 표준 API 명세이다.
- Java Application에서 RDBMS를 사용하는 방식을 정의한 인터페이스이다.
- EntityManager(em)을 통해 데이터를 처리한다.

1-1) Hibernate
- JPA의 구현체 중, 가장 많이 사용하는 구현체이다.

1-2) Spring Data JPA
- JPA를 추상화한 Repository 인터페이스를 제공하는 Spring Module이다.
- Spring Data JPA -> JPA -> Hibernate -> JDBC

2) H2 DB
- jdbc:h2:mem~: 메모리 모드 DB
- jdbc:h2:tcp~: TCP 모드 DB

3) Richardson Maturity Model
- Level 0: http://server/getPosts, http://server/deletePosts 등 REST 설계 원칙을 따르지 않은 구조
- Level 1: http://server/users, http://server/users/10 등 API 규칙을 따르는 구조
- Level 2: Level 1과 HTTP 메서드를 적용한 구조
- Level 3: Level 2와 HATEOAS를 적용한 구조
(특정 리소스의 처리에 필요한 URI, 다음 처리 작업에 대한 URI 정보를 제공한다.)

3-1) RESTful
- HTTP 메서드를 제공한다. (GET, POST, PUT, DELETE)
- HTTP 상태 코드를 제공한다. (200, 201, 400, 401, 403, 404, 500, ...)
(Ok, Created, Bad Request, Unauthorized, Forbidden, Not Found, Internal Server Error, ...)
- /users, /users/1과 같이 복수형을 사용한다.
(동사 형태보다는 명사 형태를 사용한다.)
- 일관된 엔드포인트를 제공한다.
(PUT/DELETE 방식으로 /gists/{id}/star라는 동일한 엔드포인트를 제공한다.)
(/search-name, /search-nickname 등이 아닌 Parameter, Header를 활용하여 /search라는 하나의 엔드포인트를 제공한다.)